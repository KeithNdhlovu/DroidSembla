package com.limitlessvirtual.droidsembla.daos;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.limitlessvirtual.droidsembla.models.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TICKET.
*/
public class TicketDao extends AbstractDao<Ticket, Long> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Summary = new Property(1, String.class, "summary", false, "SUMMARY");
        public final static Property Status = new Property(2, String.class, "status", false, "STATUS");
        public final static Property Number = new Property(3, Integer.class, "number", false, "NUMBER");
        public final static Property ProjectId = new Property(4, long.class, "projectId", false, "PROJECT_ID");
    };

    private Query<Ticket> project_TicketsQuery;

    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TICKET' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUMMARY' TEXT," + // 1: summary
                "'STATUS' TEXT," + // 2: status
                "'NUMBER' INTEGER," + // 3: number
                "'PROJECT_ID' INTEGER NOT NULL );"); // 4: projectId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TICKET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(2, summary);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(3, status);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(4, number);
        }
        stmt.bindLong(5, entity.getProjectId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // summary
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // number
            cursor.getLong(offset + 4) // projectId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSummary(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setProjectId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ticket entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ticket entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tickets" to-many relationship of Project. */
    public List<Ticket> _queryProject_Tickets(long projectId) {
        synchronized (this) {
            if (project_TicketsQuery == null) {
                QueryBuilder<Ticket> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ProjectId.eq(null));
                project_TicketsQuery = queryBuilder.build();
            }
        }
        Query<Ticket> query = project_TicketsQuery.forCurrentThread();
        query.setParameter(0, projectId);
        return query.list();
    }

}
